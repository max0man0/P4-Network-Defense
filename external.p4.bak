/* -*- P4_16 -*- */
#include <core.p4>
#include <v1model.p4>

/*************************************************************************
*********************** P A R A M E T E R S  *****************************
*************************************************************************/

#define SUSPICIOUS_THRESHOLD 10
#define BUCKET_COUNT 1024

const bit<16> TYPE_IPV6 = 0x86DD;

/*************************************************************************
*********************** H E A D E R S  ***********************************
*************************************************************************/

typedef bit<9>  egressSpec_t;
typedef bit<48> macAddr_t;
typedef bit<128> ip6Addr_t;

header ethernet_t {
    macAddr_t dstAddr;
    macAddr_t srcAddr;
    bit<16>   etherType;
}

header ipv6_t {
    bit<4> version;
    bit<8> trafficClass;
    bit<20> flowLabel;
    bit<16> payloadLen;
    bit<8> nextHdr;
    bit<8> hopLimit;
    ip6Addr_t srcAddr;
    ip6Addr_t dstAddr;
}

struct suspiciousCounterEntry_t {
    bit<8> index;
    bool valid;
}

struct network_t {
    ip6Addr_t network_addr;
    bit<8> prefix_len;
}

struct metadata {
    bit<32> hop_count_drop_count;
    bit<32> suspicious_counter_drop_count;
    bool should_drop;
    bool should_check_suspicious_table;
    suspiciousCounterEntry_t current_suspicious_counter_entry;
    network_t current_network;
}

struct headers {
    ethernet_t ethernet;
    ipv6_t ipv6;
}

/*************************************************************************
*********************** P A R S E R  ***********************************
*************************************************************************/

parser MyParser(packet_in packet,
                out headers hdr,
                inout metadata meta,
                inout standard_metadata_t standard_metadata) {

    state start {
        transition parse_ethernet;
    }

    state parse_ethernet {
        packet.extract(hdr.ethernet);
        transition select(hdr.ethernet.etherType) {
            TYPE_IPV6 : parse_ipv6;
            default : accept;
        }
    }

    state parse_ipv6 {
        packet.extract(hdr.ipv6);
        transition accept;
    }
}


/*************************************************************************
************   C H E C K S U M    V E R I F I C A T I O N   *************
*************************************************************************/

control MyVerifyChecksum(inout headers hdr, inout metadata meta) {
    apply {  }
}


/*************************************************************************
**************  I N G R E S S   P R O C E S S I N G   *******************
*************************************************************************/

register<bit<32>>(2) drop_counter_reg; // index 0 for hop count, index 1 for suspicious counter
register<bit<32>>(256) suspicious_counter_reg;
register<bit<1>>(BUCKET_COUNT) bf_reg1; // bloom filter 1 for source address
register<bit<1>>(BUCKET_COUNT) bf_reg2; // bloom filter 2 for source address
register<bit<1>>(BUCKET_COUNT) bf_reg3; // bloom filter 3 for source address
register<bit<1>>(BUCKET_COUNT) bf_reg4; // bloom filter 4 for source address
register<bit<48>>(512) duration_reg;
register<bit<48>>(512) duration_timestamp_reg;
register<bit<32>>(1) last_duration_index_reg;

control MyIngress(inout headers hdr,
                  inout metadata meta,
                  inout standard_metadata_t standard_metadata) {

    action jenkins_hash(in bit<32> key, out bit<32> hash_result) {
        // Split the 32-bit key into four 8-bit chunks
        // the bytes are 32 bits long to add them to the hash_result
        // (both need to be the same size)
        bit<32> byte0 = key & 0xFF;
        bit<32> byte1 = (key >> 8) & 0xFF;
        bit<32> byte2 = (key >> 16) & 0xFF;
        bit<32> byte3 = (key >> 24) & 0xFF;

        // Initialize hash to zero
        hash_result = 0;

        // Process each byte, following the JOAT steps
        hash_result = hash_result + byte0;
        hash_result = hash_result + (hash_result << 10);
        hash_result = hash_result ^ (hash_result >> 6);

        hash_result = hash_result + byte1;
        hash_result = hash_result + (hash_result << 10);
        hash_result = hash_result ^ (hash_result >> 6);

        hash_result = hash_result + byte2;
        hash_result = hash_result + (hash_result << 10);
        hash_result = hash_result ^ (hash_result >> 6);

        hash_result = hash_result + byte3;
        hash_result = hash_result + (hash_result << 10);
        hash_result = hash_result ^ (hash_result >> 6);

        // Final mixing steps
        hash_result = hash_result + (hash_result << 3);
        hash_result = hash_result ^ (hash_result >> 11);
        hash_result = hash_result + (hash_result << 15);

        // Make it within bucket size
        hash_result = hash_result % BUCKET_COUNT;
    }

    action get_hash_inputs(in bit<128> src_addr, out bit<32> input1, out bit<32> input2, out bit<32> input3, out bit<32> input4) {
        input1 = (bit<32>)src_addr; // first (rightmost) 32 bits of src_addr
        input2 = (bit<32>)(src_addr >> 32); // the next 32 bits of src_addr
        input3 = (bit<32>)(src_addr >> 64); // the next 32 bits of src_addr
        input4 = (bit<32>)(src_addr >> 96); // the last (leftmost) 32 bits of src_addr
    }

    action drop() {
        meta.should_drop = true;
    }

    action suspicious_counter_drop() {
        meta.should_drop = true;
        bit<32> drop_counter_value;
        drop_counter_reg.read(drop_counter_value, (bit<32>)1);
        drop_counter_value = drop_counter_value + 1;
        drop_counter_reg.write((bit<32>)1, drop_counter_value);
        meta.suspicious_counter_drop_count = drop_counter_value;
    }

    // Multicast to all ports
    action multicast_all() {
        standard_metadata.mcast_grp = 3;
        hdr.ipv6.hopLimit = hdr.ipv6.hopLimit - 1;
    }

    // Forward to a specific port
    action mac_forward(egressSpec_t port) {
        standard_metadata.egress_spec = port;
        hdr.ipv6.hopLimit = hdr.ipv6.hopLimit - 1;
    }

    table mac_lookup {
        key = {
            hdr.ethernet.dstAddr : exact;
        }
        actions = {
            multicast_all;
            mac_forward;
            drop;
        }
        size = 1024;
        default_action = multicast_all;
    }

    // table hop_count {
    //     key = {
    //         hdr.ipv6.srcAddr: lpm;
    //         hdr.ipv6.hopLimit : exact;
    //     }
    //     actions = {
    //         drop;
    //         NoAction;
    //     }
    //     size = 256;
    //     default_action = drop;
    // }

    action extract_network(ip6Addr_t network_addr, bit<8> prefix_len) {
        meta.current_network.network_addr = network_addr;
        meta.current_network.prefix_len = prefix_len;
    }

    table existing_networks {
        key = {
            hdr.ipv6.srcAddr: lpm;
        }
        actions = {
            extract_network;
            NoAction;
        }
        size = 256;
        default_action = NoAction;
    }

    table hop_count {
        key = {
            meta.current_network.network_addr: exact;
            meta.current_network.prefix_len: exact;
            hdr.ipv6.hopLimit : exact;
        }
        actions = {
            drop;
            NoAction;
        }
        size = 256;
        default_action = drop;
    }

    table log_packets {
        key = {
            meta.hop_count_drop_count: exact;
            meta.suspicious_counter_drop_count: exact;
        }
        actions = {
            NoAction;
        }
        size = 256;
        default_action = NoAction;
    }

    action increment_suspicious_counter(bit<8> index) {
        bit<32> suspicious_counter_value;
        suspicious_counter_reg.read(suspicious_counter_value, (bit<32>)index);
        suspicious_counter_value = suspicious_counter_value + 1;
        suspicious_counter_reg.write((bit<32>)index, suspicious_counter_value);
    }

    action set_suspicious_counter_index(bit<8> index) {
        meta.current_suspicious_counter_entry.index = index;
        meta.current_suspicious_counter_entry.valid = true;
    }

    action set_invalid_suspicious_counter_index() {
        meta.current_suspicious_counter_entry.index = 0;
        meta.current_suspicious_counter_entry.valid = false;
    }

    table suspicious_counter_index {
        key = {
            hdr.ipv6.srcAddr: lpm;
        }
        actions = {
            set_suspicious_counter_index;
            set_invalid_suspicious_counter_index;
        }
        size = 256;
        default_action = set_invalid_suspicious_counter_index;
    }

    apply {
        meta.should_drop = false;
        meta.should_check_suspicious_table = true;

        // Apply the defence mechanisms only if the packet is IPv6
        if (hdr.ipv6.isValid()) {

            /***** Suspicous Counter Check *****/
            // Check if the source address is in the suspicious table
            suspicious_counter_index.apply(); // set the current_suspicious_counter_entry

            // if the counter exists, check if it is above the threshold
            if (meta.current_suspicious_counter_entry.valid) {
                bit<32> suspicious_counter_value;
                suspicious_counter_reg.read(suspicious_counter_value, (bit<32>)meta.current_suspicious_counter_entry.index);
                if (suspicious_counter_value >= SUSPICIOUS_THRESHOLD) {
                    suspicious_counter_drop();
                    meta.should_check_suspicious_table = false;
                }
            }
            /*************************************/


            /***** Hop Count (Metadata) Table Check *****/
            // Check if the source address is in the existing networks table and apply the hop count table
            // to drop spoofed packets
            // Note: the "if not dropped" condition is to avoid dropping the packet twice
            if (!meta.should_drop) {
                existing_networks.apply();
                hop_count.apply();

                // check if the packet is dropped by the hop count table and if the srcAddr starts with 2001
                if (meta.should_drop && (bit<16>)(hdr.ipv6.srcAddr >> 112) == 0x2001) {
                    // increment the hop count drop counter
                    bit<32> drop_counter_value;
                    drop_counter_reg.read(drop_counter_value, (bit<32>)0);
                    drop_counter_value = drop_counter_value + 1;
                    drop_counter_reg.write((bit<32>)0, drop_counter_value);
                    meta.hop_count_drop_count = drop_counter_value;
                }
            }
            /*******************************************/

            /***** Suspicious Counter Increment *****/
            // Note: the current suspicious counter entry validitiy is checked because
            // we might increment the suspicious counter in the following block
            if (meta.should_drop && meta.should_check_suspicious_table && meta.current_suspicious_counter_entry.valid) {
                // check if the source address has been seen before using the bloom filter
                // break the source address into 4 32-bit chunks and hash each chunk
                bit<32> hash_result1;
                bit<32> hash_result2;
                bit<32> hash_result3;
                bit<32> hash_result4;
                bit<32> input1;
                bit<32> input2;
                bit<32> input3;
                bit<32> input4;

                get_hash_inputs(hdr.ipv6.srcAddr, input1, input2, input3, input4);
                jenkins_hash(input1, hash_result1);
                jenkins_hash(input2, hash_result2);
                jenkins_hash(input3, hash_result3);
                jenkins_hash(input4, hash_result4);

                bit<1> bf_reg1_value;
                bit<1> bf_reg2_value;
                bit<1> bf_reg3_value;
                bit<1> bf_reg4_value;
                bf_reg1.read(bf_reg1_value, hash_result1);
                bf_reg2.read(bf_reg2_value, hash_result2);
                bf_reg3.read(bf_reg3_value, hash_result3);
                bf_reg4.read(bf_reg4_value, hash_result4);

                if (bf_reg1_value == 0 || bf_reg2_value == 0 || bf_reg3_value == 0 || bf_reg4_value == 0) {
                    // if the source address has not been seen before, increment the suspicious counter
                    increment_suspicious_counter((bit<8>)meta.current_suspicious_counter_entry.index);
                    // set the bloom filter bits to 1
                    bf_reg1.write(hash_result1, 1);
                    bf_reg2.write(hash_result2, 1);
                    bf_reg3.write(hash_result3, 1);
                    bf_reg4.write(hash_result4, 1);
                }
                /****************************************************************************************/

                // Note: no need to drop() here, as the packet is already marked for drop
            }
        }

        // Forward the packet
        if (hdr.ethernet.isValid() && !meta.should_drop)
            mac_lookup.apply();

        // Read the drop counters from the counter register for logging
        bit<32> hop_count_drop_count;
        bit<32> suspicious_counter_drop_count;
        drop_counter_reg.read(hop_count_drop_count, (bit<32>)0);
        drop_counter_reg.read(suspicious_counter_drop_count, (bit<32>)1);
        meta.hop_count_drop_count = hop_count_drop_count;
        meta.suspicious_counter_drop_count = suspicious_counter_drop_count;
        
        // Log the packet
        log_packets.apply();
    }
}

/*************************************************************************
****************  E G R E S S   P R O C E S S I N G   *******************
*************************************************************************/

control MyEgress(inout headers hdr,
                 inout metadata meta,
                 inout standard_metadata_t standard_metadata) {

    action drop() {
        mark_to_drop(standard_metadata);
    }

    apply {
        // Calculate the duration of the packet in the ingress pipeline if the srcAddr starts with 2001
        if ((bit<16>)(hdr.ipv6.srcAddr >> 112) == 0x2001) {
            // Calculate the duration
            bit<48> current_timestamp = standard_metadata.egress_global_timestamp;
            bit<48> duration = current_timestamp - standard_metadata.ingress_global_timestamp;

            // Store the duration in the duration register
            bit<32> last_duration_index;
            last_duration_index_reg.read(last_duration_index, 0);
            duration_reg.write(last_duration_index, duration);

            // Store the timestamp in the duration timestamp register
            duration_timestamp_reg.write(last_duration_index, current_timestamp);
            
            // Update the duration index
            if (last_duration_index == 511)
                last_duration_index = 0;
            else
                last_duration_index = last_duration_index + 1;
            last_duration_index_reg.write(0, last_duration_index);
        }

        // Drop the packet if it is marked for drop
        if (meta.should_drop)
            drop();

        // Prune multicast packet to ingress port to preventing loop
        if (standard_metadata.egress_port == standard_metadata.ingress_port)
            drop();
    }
}

/*************************************************************************
*************   C H E C K S U M    C O M P U T A T I O N   **************
*************************************************************************/

control MyComputeChecksum(inout headers hdr, inout metadata meta) {
     apply {

    }
}


/*************************************************************************
***********************  D E P A R S E R  *******************************
*************************************************************************/

control MyDeparser(packet_out packet, in headers hdr) {
    apply {
        packet.emit(hdr.ethernet);
        packet.emit(hdr.ipv6);
    }
}

/*************************************************************************
***********************  S W I T C H  *******************************
*************************************************************************/

V1Switch(
    MyParser(),
    MyVerifyChecksum(),
    MyIngress(),
    MyEgress(),
    MyComputeChecksum(),
    MyDeparser()
) main;